"use strict";!function(){var hostname=self.location.hostname,version="v2::",domainWhitelist=[];domainWhitelist.push(hostname);var lang=["","de","es"],pagesCacheName="pages",assetsCacheName="assets",createOfflineCache=function(){var offlinePages=[];return lang.forEach((function(element){""!=element&&(element="/"+element),offlinePages.push("https://"+hostname+element+"/offline/")})),caches.open("v2::pages").then((function(cache){return cache.addAll(offlinePages)}))},clearOldCaches=function(){return caches.keys().then((function(keys){return Promise.all(keys.filter((function(key){return 0!==key.indexOf("v2::")})).map((function(key){return caches.delete(key)})))}))};self.addEventListener("install",(function(event){event.waitUntil(createOfflineCache().then((function(){return self.skipWaiting()})))})),self.addEventListener("activate",(function(event){event.waitUntil(clearOldCaches().then((function(){return self.clients.claim()})))})),self.addEventListener("fetch",(function(event){var request=event.request;if(!0!==request.url.includes("purge/directus_cache")&&!0!==request.url.includes("rebuild/directus_cache")){var langSlug="",requestpathParts=request.url.split("/");requestpathParts.length>3&&void 0!==requestpathParts[3]&&null!==requestpathParts[3]&&""!==requestpathParts[3]&&lang.includes(requestpathParts[3])&&(langSlug="/"+requestpathParts[3]);var offlinePagePath=langSlug+"/offline/";if("GET"===request.method)if(-1!==request.headers.get("Accept").indexOf("text/html"))"navigate"!==request.mode&&(request=new Request(request.url,{method:"GET",headers:request.headers,mode:request.mode,credentials:request.credentials,redirect:request.redirect})),event.respondWith(caches.open("v2::pages").then((function(cache){return cache.match(request).then((function(response){var fetchPromise;return fetch(request).then((function(networkResponse){return cache.put(request,networkResponse.clone()),networkResponse}))||response}))})).catch((function(){return caches.match(offlinePagePath)})));else{var requesturl,domainstring=request.url.replace("http://","").replace("https://","").replace("www.","").split(/[/?#]/)[0];if(!1===domainWhitelist.includes(domainstring))return;event.respondWith(caches.open("v2::assets").then((function(cache){return cache.match(request).then((function(response){var fetchPromise=fetch(request).then((function(networkResponse){return cache.put(request,networkResponse.clone()),networkResponse}));return response||fetchPromise}))})))}else event.respondWith(fetch(request).catch((function(){return caches.match(offlinePagePath)})))}}))}();
//# sourceMappingURL=serviceworker-cache.min.js.map